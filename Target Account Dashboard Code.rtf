{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /* 24 Hour Target Account Activties produces a number overlay chart displaying the total number of prospecting activities in target accounts created within the last 24 hours. This number is a daily proof point that should, in general, be maximized by each Account Executive.  */\
\
select\
  count(t.id) as Daily_Activity_Count -- Counting tasks\
from\
  salesforce_fivetran.task t\
  join salesforce_fivetran.account a on\
    t.account_id = a.id\
where\
  date_trunc('day', t.created_date) >= (current_date - 1) -- Filtering for tasks created in the last 24 hours\
  and a.account_status_c != 'Customer' -- Target accounts are non-customers we're trying to break into\
  and trim(Account_Manager_c) is not null -- Only include target accounts, as identified by the                                                   Account Executives name in the 'Account_Manager_c' field\
  and a.opp_count_open_ops_c = 0 -- Don't include activity on open opps\
  and (\
    select\
      id\
    from\
      salesforce_fivetran.user\
    where\
      [salesforce_fivetran.user.first_name || ' ' || salesforce_fivetran.user.last_name=ADR]\
  ) = a.owner_id -- Filter for ADR\
\
\
/*SELECT The purpose of this chart is to show the number of prospecting activities on target accounts by week to track activity across the weeks of the previous month, and to compare different weeks to note trends as they begin to appear. This chart combines data from the task and account tables in Salesforce to identify the target accounts, filtered by Account Development Representative. SELECT*/\
\
select\
  date_trunc('week', t.created_date) as week -- Pulling week from created_date\
  , count(t.id) as Daily_Activity_Count -- Key metrics is the count of activities by week\
from -- Combine data from task and account tables\
  salesforce_fivetran.task t\
  join salesforce_fivetran.account a on\
    t.account_id = a.id\
where\
  date_trunc('day', t.created_date) >= (current_date - 28) -- Using 28 days as date range to be able to include exactly the last 4 weeks\
  and a.account_status_c != 'Customer' -- New business prospects only\
  and trim(Account_Manager_c) is not null -- All of a particular ADR's accounts should be tagged by only one Account Executive\
  and a.opp_count_open_ops_c = 0 -- Exclude accounts with open opportunities\
  and (\
    select\
      id\
    from\
      salesforce_fivetran.user\
    where\
      [salesforce_fivetran.user.first_name || ' ' || salesforce_fivetran.user.last_name=ADR]\
  )\
  = a.owner_id -- Filter for ADR name\
group by -- Purpose of this chart is to view weekly data\
  week\
order by\
  week desc\
\
\
/*The purpose of this chart is to keep a continually increasing record of the number of activities on target accounts for the quarter. This could be compared to a goal, and thus may make sense as a percentage to goal or similar chart at some point. It pulls the tasks from Accounts and Task tables and sums the number of target account activities since the beginning of the quarter.*/\
\
select\
  count(t.id) as Daily_Activity_Count -- Key metric is count\
from -- Combine task and account\
  salesforce_fivetran.task t\
  join salesforce_fivetran.account a on\
    t.account_id = a.id\
where\
  -- Identify what quarter it is to choose the daterange to filter on\
  date_trunc('day', t.created_date) >= case\
    when date_trunc('qtr', current_date) >= '2020-01-01'\
    and date_trunc('qtr', current_date) < '2020-04-01'\
      then '2020-01-01'\
    when date_trunc('qtr', current_date) >= '2020-04-01'\
    and date_trunc('qtr', current_date) < '2020-07-01'\
      then '2020-04-01'\
    when date_trunc('qtr', current_date) >= '2020-07-01'\
    and date_trunc('qtr', current_date) < '2020-10-01'\
      then '2020-07-01'\
    when date_trunc('qtr', current_date) >= '2020-10-01'\
    and date_trunc('qtr', current_date) < '2021-01-01'\
      then '2020-10-01'\
  end\
  and a.account_status_c != 'Customer' -- New business target accounts only\
  and trim(Account_Manager_c) is not null -- Only accounts with Account_Manager_c populated count as target accounts\
  and a.opp_count_open_ops_c = 0 -- Exclude open opps\
  and (\
    select\
      id\
    from\
      salesforce_fivetran.user\
    where\
      [salesforce_fivetran.user.first_name || ' ' || salesforce_fivetran.user.last_name=ADR]\
  )\
  = a.owner_id -- Select Account Development Rep\
\
/* The purpose of this chart is to track daily prospecting activity by account. The query returns prospecting activity on target accounts, then groups them by account. This chart is useful to be separated from the chart below so that the activity of the day can quickly be compared to the activity on the accounts across longer time horizons.*/\
\
\
with -- CTE that pulls activities created in the last 24 hours, grouped by account ID\
  daily as (\
    select -- pull account ID and # prospecting activities\
      a.id as acc\
      , count(t.id) as Daily_Activity_Count\
    from -- These two values are pulled from the task and account table\
      salesforce_fivetran.task t\
      join salesforce_fivetran.account a on -- account and task joined into one table\
        t.account_id = a.id\
    where\
      date_trunc('day', t.created_date) >= (current_date - 1) -- Last 24 hours\
    group by\
      a.id\
    order by\
      Daily_Activity_Count asc\
  )\
\
select\
  a.name -- Final chart will have name of account\
  , cast(\
    case -- Want all target accounts to populate whether there has been activity or not\
      when daily.Daily_Activity_Count is null \
        then 0\
      else daily.Daily_Activity_Count\
    end as integer\
  )\
  as Daily\
from -- Combine account, task and user table to get all of the values and filter options\
  salesforce_fivetran.account a\
  left join salesforce_fivetran.task t on\
    a.id = t.account_id\
  left join salesforce_fivetran.user u on\
    u.id = t.created_by_id\
  left join daily on\
    daily.acc = a.id\
where\
  a.account_status_c != 'Customer' -- New usiness only\
  and trim(Account_Manager_c) is not null -- Definition of target account\
  and a.opp_count_open_ops_c = 0 -- Exclude open opps\
  and ( -- Select ADR to determine territory\
    select\
      id\
    from\
      salesforce_fivetran.user\
    where\
      [salesforce_fivetran.user.first_name || ' ' || salesforce_fivetran.user.last_name=ADR]\
  )\
  = a.owner_id\
group by\
  a.name\
  , a.last_target_account_date_c\
  , daily.Daily_Activity_Count\
order by\
  Daily desc -- Order by highest activities first\
\
\
/* This chart shows each target account with the number of activities by previous quarter, month, and day, a link to the Salesforce account record, and a value called "Account Quality Score" thtat indicates the quality of the account based on several key factors in making such a determination. Each prospecting sum is pulled via a CTE, then "pasted" to the account name. The Account Quality Score is determined via Case statement (this would best be turned into a snippet eventually). The Salesforce link is created by combining the account id with the known URL base to produce an active link. This chart is very useful for managing prospecting activities across the target account based over time, and to track the overall quality of the account based as determined by the account quality score. */\
\
-- Select activities for target accounts created in last 7 days and group by account\
with \
  weekly as (\
    select\
      a.id as acc\
      , count(t.id) as Weekly_Activity_Count\
    from\
      salesforce_fivetran.task t\
      join salesforce_fivetran.account a on\
        t.account_id = a.id\
    where\
      date_trunc('day', t.created_date) > (current_date - 7)\
    group by\
      a.id\
    order by\
      Weekly_Activity_Count asc\
  )\
-- Select activities for target accounts created in last 30 days and group by account\
  , monthly as ( \
    select\
      t.account_id as acc\
      , count(t.id) as Monthly_Activity_Count\
    from\
      salesforce_fivetran.task t\
    where\
      date_trunc('day', t.created_date) > (current_date - 30)\
    group by\
      t.account_id\
  )\
\
-- Select activities for target accounts created in last 90 days and group by account\
  , quarterly as (\
    select\
      t.account_id as acc\
      , count(t.id) as Quarterly_Activity_Count\
    from\
      salesforce_fivetran.task t\
    where\
      date_trunc('day', t.created_date) > (current_date - 90)\
    group by\
      t.account_id\
  )\
-- Select company and count of usergems for each account\
  , usergems as (\
    select\
      vw.sfdc_user_gems__c.user_gems_current_company__c as Comp_Name\
      , count(vw.sfdc_user_gems__c.user_gems_current_company__c) as Usergem_Count\
    from\
      vw.sfdc_user_gems__c\
    where -- Get usergems for current account owner\
      [vw.sfdc_user_gems__c.account_owner__c=ADR]\
      or vw.sfdc_user_gems__c.account_owner__c like '%Jenna%'\
    group by\
      vw.sfdc_user_gems__c.user_gems_current_company__c\
  )\
\
-- Copy results from Weekly, Monthly, and Quarterly activity query into one table, then apply account quality score via Case statement that also accounts for UserGems CTE\
select\
  a.name\
  , case\
    when quarterly.Quarterly_Activity_Count is null\
      then 0\
    else quarterly.Quarterly_Activity_Count\
  end as Quarter\
  , case\
    when monthly.Monthly_Activity_Count is null\
      then 0\
    else monthly.Monthly_Activity_Count\
  end as month\
  , case\
    when weekly.Weekly_Activity_Count is null\
      then 0\
    else weekly.Weekly_Activity_Count\
  end as Week\
  , case\
    when a.dfox_latest_funding_amount_c > 5000000\
      then 1\
    else 0\
  end + case\
    when a.dfox_latest_funding_date_c > '2018-01-01'\
      then 1\
    else 0\
  end + case\
    when a.total_opp_count_c > 1\
      then 2\
    when a.total_opp_count_c = 1\
      then 1\
    else 0\
  end + case\
    when usergems.Usergem_Count > 1\
      then 2\
    when usergems.Usergem_Count = 1\
      then 1\
    else 0\
  end as Account__Quality_Score\
  , 'https://periscopedata.my.salesforce.com/' + a.id as SFDC\
from\
  salesforce_fivetran.account a\
  left join salesforce_fivetran.task t on\
    a.id = t.account_id\
  left join salesforce_fivetran.user u on\
    u.id = t.created_by_id\
  left join weekly on\
    weekly.acc = a.id\
  left join monthly on\
    monthly.acc = a.id\
  left join quarterly on\
    quarterly.acc = a.id\
  left join usergems on\
    usergems.Usergem_Count = a.name\
where\
  a.account_status_c != 'Customer' -- New business only\
  and trim(Account_Manager_c) is not null\
  and a.opp_count_open_ops_c = 0 -- Exlude accounts with existing opps\
  and (\
    select\
      id\
    from\
      salesforce_fivetran.user\
    where\
      [salesforce_fivetran.user.first_name || ' ' || salesforce_fivetran.user.last_name=ADR]\
  )\
  = a.owner_id\
group by\
  a.name\
  , a.last_target_account_date_c\
  , weekly.Weekly_Activity_Count\
  , monthly.Monthly_Activity_Count\
  , quarterly.Quarterly_Activity_Count\
  , a.dfox_latest_funding_amount_c\
  , a.dfox_latest_funding_date_c\
  , a.total_opp_count_c\
  , usergems.Usergem_Count\
  , a.id\
\
/* This chart shows accounts from the general account base sorted by a value called "Account Quality Score" that indicates the quality of the account based on several key factors in making such a determination. Table lists out several of these key details, such as number of UserGems (previous users of Periscope), recency of funding, and number of previous opps at the account. The Account Quality Score is determined via Case statement (this would best be turned into a snippet eventually). The Salesforce link is created by combining the account ID with the known URL base to produce an active link. Finally, the total account list is generated by combining accounts available to the Account Executive to select from in their own set of accounts as indicated by the ADR they work with, and all other accounts that are available because they are either unowned by an ADR, or because they have no been worked recently by an ADR, and thus are inactive (which makes them available to be taken and worked by a different ADR). This chart is very useful for finding new accounts, for instance, once the chart tracking prospecting activities ove tIme indicates that an existing target account has been worked enough to justify its removal from the target account list. */\
-- Select company and count of usergems for each account\
with\
  usergems as (\
    select\
      vw.sfdc_user_gems__c.user_gems_current_company__c as Comp_Name\
      , count(vw.sfdc_user_gems__c.user_gems_current_company__c) as Usergem_Count\
    from\
      vw.sfdc_user_gems__c\
    group by\
      vw.sfdc_user_gems__c.user_gems_current_company__c\
  )\
select\
  a.name\
  , (\
    select\
      last_name\
    from\
      salesforce_fivetran.user\
    where\
      salesforce_fivetran.user.id = a.owner_id\
  )\
  as Owner\
  , a.df_sub_industry_c\
  , case\
    -- Account Quality Score calculated by summing for several factors including company size, funding amount, recency of funding, opp count, and usergem count\
    when a.dfox_latest_funding_amount_c > 5000000\
      then 1\
    else 0\
  end + case\
    when a.dfox_latest_funding_date_c > '2018-01-01'\
      then 1\
    else 0\
  end + case\
    when a.total_opp_count_c > 1\
      then 2\
    when a.total_opp_count_c = 1\
      then 1\
    else 0\
  end + case\
    when usergems.Usergem_Count > 1\
      then 2\
    when usergems.Usergem_Count = 1\
      then 1\
    else 0\
  end as Account_Quality_Score\
  , 'https://periscopedata.my.salesforce.com/' + a.id as SFDC\
  -- Creating SFDC link\
  , a.dfox_stage_c\
  , a.dfox_latest_funding_date_c\
  , a.dfox_latest_funding_amount_c\
  , a.dfox_employees_c\
  , a.total_opp_count_c\
  , a.dfox_country_code_c\
  , usergems.Usergem_Count -- Account, User, and usergems tables all needed to complete this query\
from\
  salesforce_fivetran.account a\
  join salesforce_fivetran.user u on\
    a.owner_id = u.id\
  full outer join usergems on\
    usergems.Comp_Name = a.name\
where -- Filtering by correct Account Executive and ADR\
  (\
    (\
      select\
        id\
      from\
        salesforce_fivetran.user\
      where\
        [salesforce_fivetran.user.first_name || ' ' || salesforce_fivetran.user.last_name=Allbound_AEs]\
    )\
    != Account_Manager_c\
    or Account_Manager_c is null\
  )\
  and (\
    (\
      select\
        id\
      from\
        salesforce_fivetran.user\
      where\
        [salesforce_fivetran.user.first_name || ' ' || salesforce_fivetran.user.last_name=ADR]\
    )\
    = a.owner_id\
    or (\
      select\
        id\
      from\
        salesforce_fivetran.user\
      where\
        salesforce_fivetran.user.first_name = 'Jenna'\
    )\
    = a.owner_id\
    or inactive_account_c = true\
    -- Ensure account is actually available\
  )\
  -- Prefilter on software on best industry to target\
  and df_sub_industry_c like '%Software%' -- Filter out Security as less-high probability sub-industry\
  and df_sub_industry_c not like '%security%' -- filter out security companies\
  and dfox_employees_c < 250\
  -- Filter out stages that usually indicate not a good prospect\
  and dfox_stage_c not in (\
    'Public'\
    , 'Acquired'\
    , 'Subsidiary'\
    , 'Late Stage'\
  )\
  -- Prefilter on US\
  -- Focusing on new business\
  and type != 'Customer'\
  and billing_state in (\
    'CA'\
    , 'California'\
  )\
  and (\
    a.billing_country = 'US'\
    or a.billing_country = 'United States'\
  )\
order by\
  Account_Quality_Score desc\
  , a.total_opp_count_c desc\
  , a.dfox_latest_funding_date_c\
  --a.owner_id a.owner_id = '0051C000007jY4zQAE'\
\
/* This chart shows accounts from the general account base sorted by latest funding date. The total account list is generated by combining accounts available to the Account Executive to select from in their own set of accounts as indicated by the ADR they work with, and all other accounts that are available because they are either unowned by an ADR, or because they have not been worked recently by an ADR, and thus are inactive (which makes them available to be taken and worked by a different ADR). This chart is very useful for finding new accounts, for instance, once the chart tracking prospecting activities over tIme indicates that an existing target account has been worked enough to justify its removal from the target account list. */\
\
\
select\
  a.name\
  , a.dfox_latest_funding_date_c\
 , a.dfox_latest_funding_amount_c\
  , a.dfox_employees_c\
, number_of_employees\
  , 'https://periscopedata.my.salesforce.com/' + a.id as SFDC -- Creating SFDC link\
  , a.dfox_stage_c\
  , a.df_sub_industry_c\
  , a.total_opp_count_c\
  , a.billing_state\
from\
  salesforce_fivetran.account a\
  join salesforce_fivetran.user u on\
    a.owner_id = u.id\
where\
a.dfox_latest_funding_date_c is not null \
and -- Filtering by correct Account Executive and ADR\
  (\
    (\
      select\
        id\
      from\
        salesforce_fivetran.user\
      where\
        [salesforce_fivetran.user.first_name || ' ' || salesforce_fivetran.user.last_name=Allbound_AEs]\
    )\
    != Account_Manager_c\
    or Account_Manager_c is null\
  )\
  and (\
    (\
      select\
        id\
      from\
        salesforce_fivetran.user\
      where\
        [salesforce_fivetran.user.first_name || ' ' || salesforce_fivetran.user.last_name=ADR]\
    )\
    = a.owner_id\
    or (\
      select\
        id\
      from\
        salesforce_fivetran.user\
      where\
        salesforce_fivetran.user.first_name = 'Jenna'\
    )\
    = a.owner_id\
    or inactive_account_c = true\
    -- Ensure account is actually available\
  )\
-- Prefilter on software on best industry to target\
  and df_sub_industry_c like '%Software%'\
-- Filter out Security as less-high probability sub-industry\
  and df_sub_industry_c not like '%security%' \
  and number_of_employees < 500\
-- Filter out stages that usually indicate not a good prospect\
  and dfox_stage_c not in ( \
    'Public'\
    , 'Acquired'\
    , 'Subsidiary'\
    , 'Late Stage'\
  )\
-- Prefilter on US\
  and (dfox_country_code_c = 'US' or \
    a.billing_country = 'US'\
    or a.billing_country = 'United States'\
  )\
-- Focusing on new business\
  and type != 'Customer'\
order by\
 a.dfox_latest_funding_date_c desc\
\
\
# The purpose of this code is to clean data and run a logistic regression model on existing and prospective customer data to generate a probability for all prospects that, based on firmographic data, they look like a potential customer of Periscope.\
\
select \
name\
,id\
,dfox_country_code_c\
,df_industry_c\
,salesforce_fivetran.account.type\
,dfox_employees_c\
,dfox_year_founded_c\
,dfox_latest_funding_amount_c\
,dfox_total_funding_c\
,dfox_stage_c\
,dfox_revenue_estimate_c\
,account_score_c\
from salesforce_fivetran.account\
where salesforce_fivetran.account.type != 'Competitor' and \
  df_industry_c in \
  (select distinct\
  df_industry_c\
  from salesforce_fivetran.account\
  where salesforce_fivetran.account.type = 'Customer'\
  group by df_industry_c)\
\
limit 30000\
\
# The purpose of this code is to clean data and run a logistic regression model on existing and prospective customer data to generate a probability for all prospects that, based on firmographic data, they look like a potential customer of Periscope.\
\
# SQL output is imported as a dataframe variable called 'df'\
import pandas as pd \
from sklearn.linear_model import LogisticRegression\
from sklearn.model_selection import train_test_split\
from sklearn.metrics import confusion_matrix\
\
df2 = df\
\
# Bucketing employee count to turn into a categorical variable\
df2['dfox_employees_c'] = pd.cut(df2['dfox_employees_c'],bins=[1,50,250,1000,10000,1000000000], labels=["0-50", "51-250", "251-1000","1001-10000","10000+"],right=True)\
\
# Get dummy variables for each categorical variable\
countries = pd.get_dummies(df2['dfox_country_code_c'],drop_first=True)\
industries = pd.get_dummies(df2['df_industry_c'],drop_first=True)\
year = pd.get_dummies(df2['dfox_year_founded_c'],drop_first=True)\
stage = pd.get_dummies(df2['dfox_stage_c'],drop_first=True)\
customer = pd.get_dummies(df2['type'],drop_first=True)\
employees = pd.get_dummies(df2['dfox_employees_c'],drop_first=True)\
\
# Combine categorical variables with continuous variables to get dataframe for machine learning\
account_variables = pd.concat([df2['name'],df2['dfox_employees_c'],df2['id'],customer,employees,df2['dfox_revenue_estimate_c'],df2['account_score_c'],countries,industries,year,stage],axis=1)\
\
# Remove any columns with NA values\
account_variables = account_variables.dropna(how='any',axis=0)\
\
# Get X and Y variable dataframes\
X = account_variables.drop('Prospect',axis=1)\
y = account_variables[['Prospect']].copy()\
\
# Split into training and testing data\
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\
\
# Unique Periscope behavior - add back indices into new dataframes so the first columns will be displayed\
X_train = X_train.reset_index().drop('index', axis = 1)\
X_test = X_test.reset_index().drop('index', axis = 1)\
y_train = y_train.reset_index().drop('index', axis = 1)\
y_test = y_test.reset_index().drop('index', axis = 1)\
\
# Save names to be reapplied to final probability results\
X_train_names = X_train['name']\
X_test_names = X_test['name']\
# Save employee counts to be reapplied to final probability results\
X_train_employees = X_train['dfox_employees_c']\
X_test_employees = X_test['dfox_employees_c']\
# Save account id to create link to Salesforce page for each result\
X_train_id = 'https://periscopedata.my.salesforce.com/' + X_train['id']\
X_test_id = 'https://periscopedata.my.salesforce.com/' + X_test['id']\
# Remove the saved descriptive variables from final training dataset\
X_test = X_test.drop(['name','dfox_employees_c','id'],axis=1)\
X_train = X_train.drop(['name','dfox_employees_c','id'],axis=1)\
\
# Create and fit final training dataset to model\
logmodel = LogisticRegression()\
logmodel.fit(X_train,y_train)\
\
# Generate prediction probabilities for each test account\
prediction_probabilities = pd.DataFrame(logmodel.predict_proba(X_test))\
print(prediction_probabilities.shape)\
print(len(X_test_names))\
print(X_test_names)\
\
# Create final dataframe by adding back name, employees, and account id into results dataframe\
probability_results = pd.concat([X_test_names,X_test_employees,X_test_id,prediction_probabilities],axis=1,ignore_index=False)\
\
# Sort by probability of becoming a customer\
probability_results.sort_values(by=0,ascending=False,inplace=True)\
\
# Visualize results in Periscope\
periscope.table(probability_results)\
\
\
# confusion_matrix = pd.crosstab(df['y_Actual'], df['y_Predicted'], rownames=['Actual'], colnames=['Predicted'])}